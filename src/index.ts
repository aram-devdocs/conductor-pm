import { app, BrowserWindow } from "electron";
import express from "express";
import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();
const server = express();
const PORT = process.env.PORT || 3001;

// Basic middleware
server.use(express.json());

// Job management endpoints
server.post("/api/jobs", async (req, res) => {
  try {
    const { name, schedule, command } = req.body;
    const job = await prisma.job.create({
      data: {
        name,
        schedule,
        command,
        isActive: true,
      }
    });
    res.json(job);
  } catch (error) {
    res.status(500).json({ error: "Failed to create job" });
  }
});

server.get("/api/jobs", async (req, res) => {
  try {
    const jobs = await prisma.job.findMany();
    res.json(jobs);
  } catch (error) {
    res.status(500).json({ error: "Failed to fetch jobs" });
  }
});

server.put("/api/jobs/:id", async (req, res) => {
  try {
    const { id } = req.params;
    const { name, schedule, command, isActive } = req.body;
    const job = await prisma.job.update({
      where: { id: parseInt(id) },
      data: { name, schedule, command, isActive }
    });
    res.json(job);
  } catch (error) {
    res.status(500).json({ error: "Failed to update job" });
  }
});

server.delete("/api/jobs/:id", async (req, res) => {
  try {
    const { id } = req.params;
    await prisma.job.delete({
      where: { id: parseInt(id) }
    });
    res.json({ message: "Job deleted successfully" });
  } catch (error) {
    res.status(500).json({ error: "Failed to delete job" });
  }
});

// Example routes
server.get("/", (req, res) => {
  res.json({ message: "Express server is running!" });
});

// Additional route for testing
server.get("/health", (req, res) => {
  res.json({ status: "healthy", timestamp: new Date().toISOString() });
});

// Start the server
server.listen(PORT, () => {
  console.log(`Express server running on port ${PORT}`);
});
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
  app.quit();
}

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on("ready", createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    app.quit();
  }
});

app.on("activate", () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
